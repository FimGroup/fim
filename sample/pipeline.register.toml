[parameter]
# Declare the variables that are used by the pipeline
"inputs" = [
    "user"
]
"outputs" = [
    "user"
]
# Declare the operations that are used by the pipeline
"pre_outputs" = [
    { "@remove" = "user" }
]

[pipeline]
"source_connectors" = [
    # Source connector will accept inbound traffic and convert it to FlowModel then invoke the following pipeline steps
    # All the connectors here will trigger the same pipeline, which means one pipeline will allow several source connectors
    # @connector should be used to define the type of connector
    # @mapping should also be used to define the FlowModel mapper, otherwise no data will be mapped for the pipeline
    # Other key-value pairs are options passing to the connector
    # Note: the option key should follow the format of path format
    # Note2: the connector will also share the same FlowModel
    { "@connector" = "http_rest", "@mapping" = "http_inst", "http.listen" = "0.0.0.0:8081", "http.method" = "post", "http.path" = "/user/register" }
]
"steps" = [
    # Each step should have @flow as key with flow name as value
    # Other key-value pairs are options passing to the flow generator
    # Note: the option key should follow the format of path format
    #
    # For using target connector(which supports both invoking flow and triggering event)
    # '&' should be used at the beginning of the flow name
    #
    # Invoke Flow(e.g. subflow/module)
    { "@flow" = "register_validation", "example.parameter1" = "value1" },
    # target connector
    # '&' should be used as prefix to indicate that the flow with the corresponding name is a connector
    { "@flow" = "&database_postgres", "@mapping" = "db_pg_insert", "database.connect_string" = "postgres://admin:admin@192.168.1.111:25432/forum", "database.operation" = "exec", "database.sql" = "insert into \"user\" (user_id, username, password, nickname, time_created, time_updated) values ($1, $2, $3, $4, $5, $6)" },
    # Trigger Event
    # Meaning this step should not have outputs or at least the outputs will be discarded
    # And this step can be invoked in parallel to the other steps
    { "#flow" = "send_register_notification" },
]

[connector_mapping.http_inst.req]
# connector mapping for both source and target connector
# FlowModel -> Connector Model
"user/username" = "http/body/username"
"user/password" = "http/body/password"
"user/nickname" = "http/body/nickname"
[connector_mapping.http_inst.res]
# connector mapping for both source and target connector and also for both directions of in and out
# FlowModel -> Connector Model
"user/user_id" = "http/body/user_id"

[connector_mapping.db_pg_insert.req]
"user/user_id" = "sql.args.0"
"user/username" = "sql.args.1"
"user/password" = "sql.args.2"
"user/nickname" = "sql.args.3"
"user/time_created" = "sql.args.4"
"user/time_updated" = "sql.args.5"
[connector_mapping.db_pg_insert.res]
"debugging/database/affected_row_count" = "sql.affected_row_count"
